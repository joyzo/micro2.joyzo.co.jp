---
import { SEO } from "astro-seo";
import "../styles/global.css";

import Menu from "@components/Menu/Menu.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import GA4 from "@components/GA4.astro";
import SurferDecoration from "@components/SurferDecoration.svelte";
// import ThemeSwitcher from "@components/ThemeSwitcher.svelte";

export interface Props {
  title?: string;
  description?: string;
  noindex?: boolean;
}

const props = Astro.props;

const BASE_TITLE = "株式会社ジョイゾー";
const title = props.title ? `${props.title} | ${BASE_TITLE}` : BASE_TITLE;
const BASE_DESCRIPTION =
  "ENJOY YOUR WORLD. 株式会社ジョイゾーは、DXと働き方の変化を通じて、お客様の世界をより楽しくすることを目指す企業です。";
const description = props.description ?? BASE_DESCRIPTION;
---

<!DOCTYPE html>
<html lang="ja">
  <head>
    <SEO
      title={title}
      description={description}
      noindex={props.noindex ?? false}
      charset="UTF-8"
      openGraph={{
        basic: {
          title,
          type: "website",
          image: `${import.meta.env.PUBLIC_SITE_URL}/og.png`,
        },
      }}
      extend={{
        link: [
          { rel: "icon", href: "/favicon.ico" }
        ],

        meta: [
          { name: "viewport", content: "width=device-width" },
          { name: "twitter:card", content: "summary_large_image" },
        ],
      }}
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Zen+Kaku+Gothic+Antique:wght@300;400;500;700;900&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'" />
    <noscript><link href="https://fonts.googleapis.com/css2?family=Zen+Kaku+Gothic+Antique:wght@300;400;500;700;900&display=swap" rel="stylesheet" /></noscript>

    {import.meta.env.PUBLIC_GOOGLE_ANALYTICS_ID && <GA4 />}
  </head>
  <body class="font-serif leading-loose text-main">
    <Header />
    <main class="overflow-x-hidden">
      <slot />
    </main>
    <Footer />

    <Menu />
    
    <!-- サーファー装飾コンポーネント -->
    <SurferDecoration client:load />
    
    <!-- テーマ切り替えコンポーネント（開発用） -->
    <!-- <ThemeSwitcher client:load /> -->

    <script>
      import "@global/smallDevice";
      // import "@global/smoothScroll"; // スクロール処理の競合を避けるため完全に無効化
    </script>
    
    <!-- 波の背景アニメーション -->
    <script>
      import "@utils/waveBackground";
      
      // DOMContentLoaded後に波の背景を初期化
      document.addEventListener('DOMContentLoaded', () => {
        if ((window as any).WaveBackground) {
          const waveBackground = new (window as any).WaveBackground();
          waveBackground.init();
        }
      });
    </script>
    
    <!-- テーマ初期化スクリプト -->
    <script>
      // URLパラメータからテーマを取得して適用
      function initializeTheme() {
        // まずsessionStorageをチェック
        let themeParam = sessionStorage.getItem('joyzo-theme');
        
        // sessionStorageにない場合はURLパラメータをチェック
        if (!themeParam) {
          const urlParams = new URLSearchParams(window.location.search);
          themeParam = urlParams.get('color');
        }
        
        const themes = {
          default: {
            primary: '#2e4db4',
            // primaryDark: '#0f3399',
            primaryDark: '#2e4db4',
            secondary: '#3B82F6',
            accent: '#de4a37',
            background: '#F8FAFC',
            backgroundSecondary: '#FFFFFF',
            text: '#1E293B',
            textSecondary: '#475569',
            textMuted: '#64748B',
            border: '#E2E8F0',
            hover: '#F1F5F9',
            // heading: '#333d70',
            heading: '#2e4db4',
          },
          black: {
            primary: '#000000',
            primaryDark: '#1A1A1A',
            secondary: '#374151',
            accent: '#E63946',
            background: '#fafafa',
            backgroundSecondary: '#ffffff',
            text: '#000000',
            textSecondary: '#374151',
            textMuted: '#6B7280',
            border: '#E5E7EB',
            hover: '#F3F4F6',
            heading: '#001F3F',
          },
          blue: {
            primary: '#2e4db4',
            // primaryDark: '#0f3399',
            primaryDark: '#2e4db4',
            secondary: '#3B82F6',
            accent: '#de4a37',
            background: '#F8FAFC',
            backgroundSecondary: '#FFFFFF',
            text: '#1E293B',
            textSecondary: '#475569',
            textMuted: '#64748B',
            border: '#E2E8F0',
            hover: '#F1F5F9',
            // heading: '#333d70',
            heading: '#2e4db4',
          },
          pink: {
            primary: '#BE185D',
            primaryDark: '#9D174D',
            secondary: '#EC4899',
            accent: '#10B981',
            background: '#FDF2F8',
            backgroundSecondary: '#FFFFFF',
            text: '#1F2937',
            textSecondary: '#4B5563',
            textMuted: '#6B7280',
            border: '#F3E8FF',
            hover: '#FCE7F3',
            heading: '#BE185D',
          },
          orange: {
            primary: '#EA580C',
            primaryDark: '#C2410C',
            secondary: '#F97316',
            accent: '#3B82F6',
            background: '#FFF7ED',
            backgroundSecondary: '#FFFFFF',
            text: '#1C1917',
            textSecondary: '#44403C',
            textMuted: '#78716C',
            border: '#FED7AA',
            hover: '#FFEDD5',
            heading: '#EA580C',
          },
          green: {
            primary: '#059669',
            primaryDark: '#047857',
            secondary: '#10B981',
            accent: '#F59E0B',
            background: '#F0FDF4',
            backgroundSecondary: '#FFFFFF',
            text: '#064E3B',
            textSecondary: '#065F46',
            textMuted: '#047857',
            border: '#BBF7D0',
            hover: '#DCFCE7',
            heading: '#059669',
          },
          purple: {
            primary: '#7C3AED',
            primaryDark: '#6D28D9',
            secondary: '#A855F7',
            accent: '#F59E0B',
            background: '#FAF5FF',
            backgroundSecondary: '#FFFFFF',
            text: '#1E1B4B',
            textSecondary: '#3730A3',
            textMuted: '#5B21B6',
            border: '#E9D5FF',
            hover: '#F3E8FF',
            heading: '#7C3AED',
          },
        };
        
        const themeName = (themeParam && themes[themeParam as keyof typeof themes]) ? themeParam : 'default';
        const theme = themes[themeName as keyof typeof themes];
        const root = document.documentElement;
        
        root.style.setProperty('--color-primary', theme.primary);
        root.style.setProperty('--color-primary-dark', theme.primaryDark);
        root.style.setProperty('--color-secondary', theme.secondary);
        root.style.setProperty('--color-accent', theme.accent);
        root.style.setProperty('--color-background', theme.background);
        root.style.setProperty('--color-background-secondary', theme.backgroundSecondary);
        root.style.setProperty('--color-text', theme.text);
        root.style.setProperty('--color-text-secondary', theme.textSecondary);
        root.style.setProperty('--color-text-muted', theme.textMuted);
        root.style.setProperty('--color-border', theme.border);
        root.style.setProperty('--color-hover', theme.hover);
        root.style.setProperty('--color-heading', theme.heading);
        
        // テーマクラスをbodyに追加
        document.body.className = document.body.className.replace(/theme-\w+/g, '');
        document.body.classList.add(`theme-${themeName}`);
      }
      
      // DOMが読み込まれた後にテーマを適用
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeTheme);
      } else {
        initializeTheme();
      }
    </script>
    
    
    <!-- プリフェッチエラー対策 -->
    <script>
      // ネットワークエラーのハンドリング
      window.addEventListener('error', (event) => {
        if (event.message && event.message.includes('Cannot prefetch')) {
          console.log('Prefetch error ignored - network conditions are poor');
          event.preventDefault();
        }
      });
      
      // Promise rejection のハンドリング
      window.addEventListener('unhandledrejection', (event) => {
        if (event.reason && event.reason.message && event.reason.message.includes('Cannot prefetch')) {
          console.log('Prefetch promise rejection ignored');
          event.preventDefault();
        }
      });
    </script>
  </body>
</html>

